runApp('Barcoding')
runApp('Barcoding')
runApp('Barcoding')
runApp('Barcoding')
runApp('Barcoding')
runApp('Barcoding')
runApp('Barcoding')
proj = "Adult"
patient = "1"
visit_nr = "1"
visit_type = "Scheduled"
date = "2020-01-01"
generate_labels_per_visit3 <- function(proj,
patient,
visit_nr,
visit_type,
date){
p <- stringr::str_pad(patient, width = 3,pad = "0", side = "left")
p <-paste0(substring(proj,1,1),p)
#v <- as.character(visit_nr) # levels 10, 11, 12, 20, 30, 40, 41, 42
static <- paste0("FOOD@\n",p,".",ifelse(visit_type=="scheduled","V","U"),visit_nr,".")
if(visit_nr==1 & proj == "Adult"){
DF <- c(
rep("03",5), # heparin,
rep("14",5)
)
LCRY <- c(
rep("02",40),
rep("04",2),
rep("05",2),
rep("06",2),
rep("07",2),
rep("08",6),
rep("10",2),
rep("11",2),
rep("12",2),
rep("13",40),
rep("17",5),
rep("18",5)
)
Brady <- c(
rep("15",6),
rep("16",6)
)
}
o <- data.frame(label = c(DF,LCRY,Brady),
paper = c(rep("DF",length(DF)),
rep("LCRY",length(LCRY)),
rep("Brady",length(Brady))))
o$label <- paste0(static,o$label,"\n",date)
return(o)
}
generate_labels_per_visit3()
generate_labels_per_visit3(proj)
generate_labels_per_visit3(proj,patient)
generate_labels_per_visit3(proj,patient,visit_type)
visit_type = "scheduled"
generate_labels_per_visit3(proj,patient,visit_type)
generate_labels_per_visit3(proj,patient,visit_type = visit_type)
generate_labels_per_visit3(proj,patient,visit_type = visit_type,visit_nr = visit_nr)
generate_labels_per_visit3(proj,patient,visit_type = visit_type,visit_nr = visit_nr,date = date)
runApp('Barcoding')
runApp('Barcoding')
runApp('Barcoding')
runApp('Barcoding')
runApp('Barcoding')
runApp('Barcoding')
runApp('Barcoding')
runApp('Barcoding')
runApp('Barcoding')
d <- "10.01.2020"
d
d %>%
f
format(d,format="%d.%m.%y")
as.date(format(d,format="%d.%m.%y"))
as.Date(format(d,format="%d.%m.%y"))
runApp('Barcoding')
runApp('Barcoding')
runApp('Barcoding')
4921.54/65*50
3785.8*18
68144+10000+10000+12000+16000+10000+8000
shiny::runApp('Barcoding')
#### Packages ####
## app.R ##
library(shinydashboard)
#install.packages("baRcodeR")
library(baRcodeR)
pacman::p_load(writexl)
#### Functions ####
source(file = "custom_create_PDF_sub.R")
source(file = "custom_create_PDF_sub2.R")
source(file = "custom_qrcode_make.R")
source(file = "custom_qrcode_make2.R")
setwd("Barcoding/")
#### Functions ####
source(file = "custom_create_PDF_sub.R")
source(file = "custom_create_PDF_sub2.R")
source(file = "custom_qrcode_make.R")
source(file = "custom_qrcode_make2.R")
source(file = "herma.R")
source(file = "LCRY.R")
source(file = "brady.R")
generate_excel <- function(proj,
patient,
visit_nr,
visit_type,
date){
p <- stringr::str_pad(patient, width = 3,pad = "0", side = "left")
p <-paste0(substring(proj,1,1),p)
#v <- as.character(visit_nr) # levels 10, 11, 12, 20, 30, 40, 41, 42
static <- paste0(p,".",ifelse(visit_type=="scheduled","V","U"),visit_nr,".")
samples <- c(rep("15",10),
rep("16",10)
)
o <- paste0(static,samples)
oo<-data.frame(a=rep("food@",length(o)),
b = o,
c = rep(c("BAT+unstim",
"BAT+aIgE",
"BAT+All",
rep("InflCircs",3),
"Bcells",
"Tcells",
rep("PBMC",2)),2),
d = format(date,"%Y"))
return(oo)
}
ui <- dashboardPage(
dashboardHeader(title = "QR code Labels generator for clinical samples"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(h1("KFO339 Labelling System"),
p("This app will help you generate labels for clinical samples within the KFO339 project."),
p("Note that patients are divided into three age groups corresponding to different clinical projects."),
p("Please provide the patient's number (e.g. A003, I008, C014), visit number and if the visit is planned or unscheduled."),
p ("You may find the paper for printing the labels:"),
a("HERMA",href="https://www.herma.de/buero-zuhause/produkt/haftetiketten-a4-movables-10001/"),
a("LCRY-2380 (Cryo Babies)", href = "https://www.carlroth.com/de/de/etiketten/kryo-etiketten-auf-dem-bogen-weiss/p/x547.1"))
),
# Boxes need to be put in a row (or column)
fluidRow(
box(
h1("Patient and Visit details"),
box(selectizeInput("project", label = "Patient age group",choices = c("Infant","Child","Adult")),
textInput("patient_n", label = "Patient number",value = "1"),
selectizeInput("paper", label = "Paper type",choices = c("LCRY-2380","HERMA")),
#width = 3
),
box(radioButtons("visit_type", label = "Type of visit",choices = c("scheduled","unscheduled")),
#width = 3,
selectizeInput("v_n", label = "Visit number",choices = c("1","2","3","4","5")),
dateInput("visit_date", label = "Visit date", value = Sys.Date())
)
)
),
fluidRow(
box(
h1("Print Files"),
p("Here You can download the files for printing the labels. HERMA are cheap paper labels, LCRY-2380 are vinyl label for -80 deg C"),
p("You can also specify from which line we should start printing to save paper."),
numericInput("startLineDF", label = "What line to start on HERMA paper?",1, min =1, max = 27),
numericInput("startLineLCRY",label = "What line to start on LCRY-2380 paper?", 1, min =1, max = 17),
downloadButton("downloadLabels", "Herma"),
downloadButton("downloadLCRY","LCRY-2380")
)
),
fluidRow(
box(
h1("Reference for coding numbers"),
p("For reference the sample types and their corresponding IDs are listed below:"),
p("01 - EDTA samples for diff. BB "),
p("02 - serum before the reaction "),
p("03 - heparin before the reaction "),
p("04 - dust from the bedroom "),
p("05 - dust from the living room "),
p("06 - stool from the patient "),
p("07 - stool from the patient's dog "),
p("08 - saliva for cytokines "),
p("09 - saliva/oral microbiome "),
p("10 - skin swab in location 1 "),
p("11 - skin swab in location 2 "),
p("12 - skin swab in location 3 "),
p("13 - serum post reaction "),
p("14 - heparin 7 days post reaction "),
p("15 - PBMCs_03  (Thermo Labels - Brady)"), #X 10
p("16 - PBMCs_14  (Thermo Labels - Brady)"), #x 10
p("17 - Plasma_03"), #x 5
p("18 - Plasma_14"),
p("20 - Serum from mothers"),
p("21 - skin of the patient's dog")#x5
)
)
)
)
generate_labels_per_visit_herma(proj = "Infant", patient="1",visit_nr = 1,visit_type = "scheduled",date = "2021-01-01")
22/64
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
require(shiny)
require(shinydashboard)
runApp('Barcoding')
generate_labels_per_visit_herma <- function(proj,
patient,
visit_nr,
visit_type,
date){
p <- stringr::str_pad(patient, width = 3,pad = "0", side = "left")
p <-paste0(substring(proj,1,1),p)
#v <- as.character(visit_nr) # levels 10, 11, 12, 20, 30, 40, 41, 42
static <- paste0("FOOD@\n",p,".",ifelse(visit_type=="scheduled","V","U"),visit_nr,".")
#### V1 ####
if(visit_type == "scheduled"){
if(visit_nr==1&proj=="Adult"){
samples <- c(rep("03",5),
rep("14", 5))
} else  if(visit_nr==1&proj=="Child"){
samples <- c(rep("02",3),
rep("03", 4),
rep("04",1),
rep("05",1),
rep("06",1),
rep("07",1),
rep("08",3),
rep("10",1),
rep("11",1),
rep("12",1),
rep("21",1))
} else if(visit_nr==1&proj=="Infant"){
samples <- c(rep("02",5),
rep("03",3),
rep("04",2),
rep("05",2),
rep("06",2),
rep("07",2),
rep("08",3),
rep("10",2),
rep("11",2),
rep("12",2),
rep("21",2))
########V 2 / 3 ######
} else if(visit_nr%in%c(2,3)&proj=="Adult"){
samples <- c(rep("bla",1))
} else if(visit_nr%in%c(2,3)&proj=="Child"){
samples <- c(rep("04",1),
rep("08", 3))
} else if(visit_nr%in%c(2,3)&proj=="Infant"){
samples <- c(rep("04",2),
rep("06", 2),
rep("08",3),
rep("09",3),
rep("10",2),
rep("11",2),
rep("12",2))
##### V4 ####
} else if(visit_nr==4&proj=="Adult"){
samples <- c(rep("03",5),
rep("14",5),
rep("19",5))
} else if(visit_nr==4&proj=="Child"){
samples <- c(rep("02",3),
rep("03",4),
rep("04",1),
rep("05",1),
rep("06",1),
rep("08",3),
rep("10",1),
rep("11",1),
rep("12",1)
)
} else if(visit_nr==4&proj=="Infant"){
samples <- c(rep("01",2),
rep("02",5),
rep("03",3),
rep("04",2),
rep("06",2),
rep("08",3),
rep("09",3),
rep("11",2),
rep("12",2),
rep("20",5))
##### V5 #####
} else if(visit_nr==5&proj=="Infant"){
samples <- c(rep("02",5),
rep("03",5))
}
} else {
##### Unscheduled ######
if(proj=="Adult"){
samples <- c(rep("03",5),
rep("14", 5))
} else  if(proj=="Child"){
samples <- c(rep("02",3),
rep("03", 4),
rep("04",1),
rep("05",1),
rep("06",1),
rep("07",1),
rep("08",3),
rep("10",1),
rep("11",1),
rep("12",1),
rep("21",1))
} else if(proj=="Infant"){
samples <- c(rep("02",5),
rep("03",3),
rep("04",2),
rep("05",2),
rep("06",2),
rep("07",2),
rep("08",3),
rep("10",2),
rep("11",2),
rep("12",2),
rep("21",2))
}
}
o <- paste0(static,samples,"\n",date)
o <- gsub(x = o,  pattern=".bla.*",replacement = "- - -")
return(data.frame(label = o))
}
shiny::runApp('Barcoding')
runApp('Barcoding')
runApp('Barcoding')
#### Packages ####
## app.R ##
library(shinydashboard)
#install.packages("baRcodeR")
library(baRcodeR)
pacman::p_load(writexl)
#### Functions ####
source(file = "custom_create_PDF_sub.R")
source(file = "custom_create_PDF_sub2.R")
source(file = "custom_qrcode_make.R")
source(file = "custom_qrcode_make2.R")
source(file = "herma.R")
source(file = "LCRY.R")
setwd("Barcoding/")
#### Functions ####
source(file = "custom_create_PDF_sub.R")
source(file = "custom_create_PDF_sub2.R")
source(file = "custom_qrcode_make.R")
source(file = "custom_qrcode_make2.R")
source(file = "herma.R")
source(file = "LCRY.R")
source(file = "brady.R")
labels_pat1 <- generate_labels_per_visit_herma(
proj = input$project,
patient = input$patient_n,
visit_nr = input$v_n,
visit_type = input$visit_type,
date = format(input$visit_date,format="%d.%m.%y"))
input <- NULL
generate_labels_per_visit_LCRY <- function(proj,
patient,
visit_nr,
visit_type,
date){
p <- stringr::str_pad(patient, width = 3,pad = "0", side = "left")
p <-paste0(substring(proj,1,1),p)
#v <- as.character(visit_nr) # levels 10, 11, 12, 20, 30, 40, 41, 42
static <- paste0("FOOD@\n",p,".",ifelse(visit_type=="scheduled","V","U"),visit_nr,".")
##### V1 ####
if(visit_type == "scheduled"){
if(visit_nr==1&proj=="Adult"){
samples <- c(rep("02",40),
rep("04",2),
rep("05",2),
rep("06",2),
rep("07",2),
rep("08",6),
rep("10",2),
rep("11",2),
rep("12",2),
rep("13",40),
rep("17",5),
rep("18",5),
rep("22",2))
} else  if(visit_nr==1&proj=="Child"){
samples <- c(rep("02",20),
rep("04",2),
rep("05",2),
rep("06",2),
rep("07",2),
rep("08",2),
rep("10",2),
rep("11",2),
rep("12",2),
rep("17",4),
rep("21",2))
} else if(visit_nr==1&proj=="Infant"){
samples <- c(rep("02",15),
rep("04",2),
rep("05",2),
rep("06",2),
rep("07",2),
rep("08",6),
rep("09",4),
rep("10",2),
rep("11",2),
rep("12",2),
rep("17",3),
rep("20",15),
rep("21",2))
##### V 2 / 3 ######
} else if(visit_nr%in%c(2,3)&proj=="Adult"){
samples <- c(rep("02",30),
rep("04",2),
rep("08",6))
} else if(visit_nr%in%c(2,3)&proj=="Child"){
samples <- c(rep("04",2),
rep("08",5))
} else if(visit_nr%in%c(2,3)&proj=="Infant"){
samples <- c(rep("04",2),
rep("06", 2),
rep("08",6),
rep("09",4),
rep("10",2),
rep("11",2),
rep("12",2))
###### V4 ####
} else if(visit_nr==4&proj=="Adult"){
samples <- c(rep("02",40),
rep("04",2),
rep("06",2),
rep("08",6),
rep("10",2),
rep("11",2),
rep("12",2),
rep("13",2),
rep("17",5),
rep("18",5))
} else if(visit_nr==4&proj=="Child"){
samples <- c(rep("02",20),
rep("04",2),
rep("06",2),
rep("08",6),
rep("10",2),
rep("11",2),
rep("12",2),
rep("17",5))
} else if(visit_nr==4&proj=="Infant"){
samples <- c(rep("02",20),
rep("04",2),
rep("06",2),
rep("08",6),
rep("09",4),
rep("10",2),
rep("11",2),
rep("12",2),
rep("17",3),
rep("20",15))
###### V5 #####
} else if(visit_nr==5&proj=="Infant"){
samples <- c(rep("02",20))
}
} else {
if(proj=="Adult"){
samples <- c(rep("02",40),
rep("04",2),
rep("05",2),
rep("06",2),
rep("07",2),
rep("08",6),
rep("10",2),
rep("11",2),
rep("12",2),
rep("13",40),
rep("17",5),
rep("18",5),
ep("21",2))
} else  if(proj=="Child"){
samples <- c(rep("02",20),
rep("04",2),
rep("05",2),
rep("06",2),
rep("07",2),
rep("08",2),
rep("10",2),
rep("11",2),
rep("12",2),
rep("17",4),
rep("21",2))
} else if(proj=="Infant"){
samples <- c(rep("02",15),
rep("04",2),
rep("05",2),
rep("06",2),
rep("07",2),
rep("08",6),
rep("09",4),
rep("10",2),
rep("11",2),
rep("12",2),
rep("17",3),
rep("20",15),
rep("21",2))
}
}
o <- paste0(static,samples,"\n",date)
o <- gsub(x = o,  pattern=".bla.*",replacement = "- - -")
return(data.frame(label = o))
}
